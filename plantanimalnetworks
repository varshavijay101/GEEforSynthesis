/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var humanmod = ee.ImageCollection("CSP/HM/GlobalHumanModification"),
    Ecoregions2017 = ee.FeatureCollection("RESOLVE/ECOREGIONS/2017");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//Human modification in seed dispersal networks
//Varsha for Evan 5/10/19


//human mod imagecollection to image
print(humanmod.first().propertyNames())
var ghm=ee.Image(humanmod.first())
//print(ghm)

//Vizualize human mod index
var vizparams= {min:0,max:1,palette: ['0000FF','FFFF00','FF0000']}
Map.addLayer(ghm,vizparams,'ghm')
print('ghm',humanmod)
print(ghm.projection().nominalScale())

//Import fusion table input for network sample locations and converts to feature collection
var networks = ee.FeatureCollection('ft:1T5uT7HqOoi8NMiNAKz-AHGytpuinpjSS4HItZ_ru');
//print(networks)
//
//Add networks to map
Map.addLayer(networks,{},'networks')//{color: 'FF0000'},
//Get human mod index for all sites
var networkmod= ghm.reduceRegions({
  collection: networks,
  reducer: ee.Reducer.mean(),//.unweighted(),
  scale:ghm.projection().nominalScale()
  })
//Check image reduction
//print(ghm.bandNames())
//print(networkmod.limit(2))//.select(ghm.bandNames()))
//Export table to V's drive
Export.table.toDrive({
  collection: networkmod,
  description: 'networkmodpt',
  folder: 'Evan',
  fileFormat:'CSV'
});

//Filter Islands


//Buffer sample network locations

var applybuff = function(feature) {
  return feature.buffer(5000);  
};

var networkbuff = networks.map(applybuff);
Map.addLayer(networkbuff,{color: '00FF00'},'networkbuff')
//Reduce regions
var networkmodBUFF= ghm.reduceRegions({
  collection: networks,
  reducer: ee.Reducer.mean(),//['meangHM'],//.unweighted(),
  scale:ghm.projection().nominalScale()
  })
//Check
//print(networkmodBUFF.first())

//Export table to V's drive
Export.table.toDrive({
  collection: networkmodBUFF,
  description: 'networkmodbuff',
  folder: 'Evan',
  fileFormat:'CSV'
});

//

///////////////Add Biome/Ecoregion for each sample location
///Load Feature Collection
var ecoregions2017=ee.FeatureCollection(Ecoregions2017)//be explict in object type
Map.addLayer(ecoregions2017,{},'ecoregions2017')
//var biomes2017=ecoregions2017.select('BIOME_NAME')
//var biomes17=ee.FeatureCollection(biomes17)
//print(biomes2017.first())

///Create nested function to iterate and pull biome names from dataset
var networkbiomes = ecoregions2017.map(function(feature){
  feature = ee.Feature(feature);
  var biomename = feature.get('BIOME_NAME');
  var networkfilter = networks.filterBounds(feature.geometry()).map(function(network){
    return ee.Feature(network).set('biome', biomename);
  });
  return networkfilter;
}).flatten();

print(networkbiomes.first())
Map.addLayer(networkbiomes,{},'networkbiomes')

//Export tables
//Export table to V's drive
Export.table.toDrive({
  collection: networkbiomes,
  description: 'networkbiomes',
  folder: 'Evan',
  fileFormat:'CSV'
});

///////Spatial Join code....currently still produces list of list
///////However overall good to know this method because the current one
///////Is error prone in areas near boundaries of biomes/ecoregions
///////multiple biomes will be assigned to a single sample point
///////Intersect/spatial join is the only way to ensure a hard cutoff
/*

// Define a spatial filter, with distance 1 km.
var distFilter = ee.Filter.withinDistance({
  distance: 1000,
  leftField: '.geo',
  rightField: '.geo',
  maxError: 10
});

var intersectfilter = ee.Filter.intersects({
  leftField: '.geo',
  rightField: '.geo',
  maxError: 10
});

// Define a saveAll join.
var distSaveAll = ee.Join.saveAll({
  matchesKey: 'biome',
  measureKey: 'distance'
});

var intersectSaveAll= ee.Join.saveAll({
  matchesKey: 'biome'
});


// Apply the join.
var networkbiomejoin = distSaveAll.apply(networks, biomes2017, distFilter);
//print(networkbiomejoin.first())
var networkbiomeintersect=intersectSaveAll.apply(networks,biomes2017,intersectfilter);

/*
///Spatial Join with tolerance
// Add Biome name as a property
var biomenamenetworkjoin = networkbiomejoin.map(function(network) {
  // Get the name of the biome
  var biome = network.get('points');
  // Return the network with a new property for biome name
  return network.set('biome', biome);
});

///Spatial Intersect
// Add Biome name as a property
var biomenamenetworkintersect = networkbiomeintersect.map(function(network) {
  // Get the name of the biome
  var biome = network.get('BIOME_NAME');
  // Return the network with a new property for biome name
  return network.set('biome', biome);
});
*/
////////////////////////////////////////////////////
/*
//Alternate approach to spatial intersection
var networksgetbiomes= networks.map(function(feat){
  feat = ee.Feature(feat);
  return  ee.Feature(feat.geometry().intersection(biomes2017), {}).copyProperties(feat);
});

print(networksgetbiomes.first())

// Print the result.
print(networkbiomejoin.first());

print(networkbiomeintersect.first());

/*
//Map result
Map.addLayer(networkbiomejoin,{},'networkbiomejoin')
Map.addLayer(networkbiomeintersect,{},'networkbiomeintersect')


//Export tables
//Export table to V's drive
Export.table.toDrive({
  collection: networkbiomejoin,
  description: 'networkbiomejoin',
  folder: 'Evan',
  fileFormat:'CSV'
});

//Export table to V's drive
Export.table.toDrive({
  collection: networkbiomeintersect,
  description: 'networkbiomeintersect',
  folder: 'Evan',
  fileFormat:'CSV'
});

*/
