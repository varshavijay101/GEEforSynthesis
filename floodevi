/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var modisevi = ee.ImageCollection("Oxford/MAP/EVI_5km_Monthly"),
    hansen = ee.Image("UMD/hansen/global_forest_change_2018_v1_6");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
////////// Influence of Phenology on Runoff Response //////////////////
///////////////////////to Forest Loss //////////////////////////
 /*
 2020 Varsha Vijay GEEforSynthesis 
 https://sites.google.com/view/geeforsynthesis
 
*/

//This case study comes from a collaboration with 
//Dr. James Knighton.
//Please read below for background.

/*
Dr. James Knighton, an environmental engineer and fellow postdoctoral researcher at SESYNC,
is investigating hydrologic responses to forest cover loss. 
One of the questions he has is whether variability in stream gage 
runnoff responses to forest loss can be explained by
phenological patterns (periodic cyling of vegetation). By evaluating this, and other potential
predictors, he hopes to characterize flood risk post-deforestation.

This has implications for the management of these systems as well as determining potential benefits
of reforestation efforts.
*/

/*
Here, we focus on characterizing vegetation phenology using MODIS EVI data.
The approaches used in this analysis combines the approaches used in the previous analysis.
Because of that, this lesson is shorter and is provided as fully functional code, commented
to explain some of the thought process behind the approach used.

Go through the lesson and explore, using visualization and printing where
you need further clarification
*/

//Load stream gage data from forested catchments.  All experienced forest loss during
//the 2001-2018 study period but are assumed to be forested 
//in year 2000
var gagesites=ee.FeatureCollection('users/varshavijay101/GEEforSynthesis/gagesites')
Map.addLayer(gagesites,{},'sites')


/*
We use Oxford MAP EVI, a global, gap filled monthly EVI estimate for 
years 2000 to 2015 to characterize the areas around the stream gage locations.

Start by filtering the image collection to the appropriate band and 
time range (consistent with Hansen Global Forest loss data).

These data are provided at 5km spatial resolution 
*/
var meanevi = modisevi.select('Mean').filterDate('2000-01-01', '2015-12-01');

/*
Apply a minimal buffer to point data to pull pixels around the gage site
*/
var applybuff = function(feature) {
  return feature.buffer(5000);  
};

var sitesbuff = gagesites.map(applybuff);
Map.addLayer(sitesbuff,{color: 'FF0000'},'buffsites')

/*
We begin with a visualization of sample EVI time series on a chart plotting
the first five samples in our dataset which are all located in Brazil.

We will also add these samples to the Map just as a reminder of where they
occur geographically
*/
var sitesfirst5= sitesbuff.limit(5)
Map.centerObject(sitesfirst5)
Map.addLayer(sitesfirst5,{color: '0000FF'},'Brazilsites')
print(ui.Chart.image.seriesByRegion(meanevi, sitesfirst5, ee.Reducer.mean(),'Mean',5000))

/*
There's a lot of years on that chart, making it difficult to understand, so let
us first filter the data to just year 2014
*/
print(ui.Chart.image.seriesByRegion(meanevi.filterDate('2014-01-01', '2015-12-01'), sitesfirst5, ee.Reducer.mean(),'Mean',5000))
print('Brazilsamples',sitesfirst5)

/*
Interestingly within our Brazil samples we different phenology captured by our EVI
time series

To understand these temporal trends in EVI further, we extract time series for all
our sample locations. This becomes a little complicated but is just the extension
of the application of mapped functions we were using before.  In this case we are mapping 
over all the images in the meanevi image collection, and assigning the Mean EVI value for 
that image to the feature (excluding null values). Then we are assigning the image ID
to each feature.  Finally we create a null geometry function to remove geometry values
in the output.  An alternative approach to setting null geometries was shown in previous
lessons.
*/

var gageevi = meanevi.map(function(image) {
  return image.reduceRegions({
    collection: sitesbuff,
    reducer: ee.Reducer.mean().setOutputs(image.bandNames()),
    scale: 5000,
  })
  .filter(ee.Filter.neq('Mean', null))
 .map(function(feature) {
    return feature.set({
      'ID': image.id(),
    });});
}).flatten();//Experiment with what the output looks without the flatten() function

print(gageevi.limit(10))

var nullgeom= function(feature){
  feature = feature.setGeometry(null)
  return (feature)}
  
var gageeviNULL=  gageevi.map(nullgeom)
print(gageeviNULL.first())

//Export the csv of time series data to Google Drive
Export.table.toDrive({
  collection: gageeviNULL,
  folder:'GEEforSynthesis',
  description: 'evitimeseries',
  fileFormat: 'CSV'
});

/*
Using the stream gage data we found a relationship between EVI 
(specifically phase shift, defined as the difference between the timing of
max precipitation and max EVI) and observed changes in runoff.  
Based on the stream gage level findings we wanted to calculate the most common 
month for max EVI globally. This is done using the following set of functions
*/

var months = ee.List.sequence(1, 12);//create list of month values
var years = ee.List.sequence(2000, 2016);//create list of year values

///sort image collection by image collection date
meanevi=meanevi.sort('system:time_start')

/*
The function below is used to make a more interpretable "month" band with
float type
*/

var add_bands = function(image) {
  image = ee.Image(image);
  return image.addBands(ee.Image.constant(ee.Number.parse(image.date()
  .format("M"))).rename('month').float());
};

var meanevimap = meanevi.map(add_bands)//Map on image collection 
//this could be combined with previous function but is expanded here for clarity

/*
When we print the image collection we should see that each image has two bands
one called Mean and one called month
*/

print('meanevimap',meanevimap)

/*
Now the function below contains a function which returns a new image collection 
from the image collection meanevi. In it for each year we calculate the
month with the highest EVI value for each pixel.  
The qualityMosaic() function is very useful for creating an image composite
which maximizes an arbitrary band in this case the 'Mean' band. 
We map across each year and this results in an image collection
with an image for each year.
*/

var maxmonthbyyear = ee.ImageCollection.fromImages(
      years.map(function (y) {
        return meanevimap.filter(ee.Filter.calendarRange(y, y, 'year'))
                    .qualityMosaic('Mean')
                    .set('year', y);
}));


print(maxmonthbyyear,"maxmonthbyyear");

/*
For this particular analysis we were interested in the most common month 
to find the max EVI so we select only the 'month' band from the 
image collection and reduce the image collection to
a single image collection using the mode() function
*/

var maxmonth=maxmonthbyyear.select('month')
var modemaxevimonth=maxmonth.mode()
modemaxevimonth=modemaxevimonth.reproject({
     crs: meanevi.first().projection().crs(),
     scale:4638.312116386213})
     
/*
Now we have produced an image of the max EVI month for the whole world! 
We can now find out some more about these data and visualize
*/
print(modemaxevimonth)

Map.addLayer(modemaxevimonth,{min:1,max:12,palette: ['blue','green','yellow','red']},'modemaxevimonth')


/*
Cool! We can begin to see some trends in these values by navigating to different places.
Where we are located in Temperate North America, the month with the max EVI (vegetation) is
June or July.  This is what we would expect and a good validation for our analysis!
*/

/*
To finish we export our analysis to Google Drive for further analysis. 
Because we want to export global data, we create a bounding region for the whole globe.
*/

var unboundedGeo = ee.Geometry.Polygon([-180, 88, 0, 88, 180, 88, 180, -88, 0, -88, -180, -88], null, false);

Export.image.toDrive({
  image: modemaxevimonth, 
  description: 'modemaxevimonth',
  region: unboundedGeo,
  crs: 'EPSG:4326',
  scale:4638.312116386213,//It is good practice to specify projections and scale when exporting
  maxPixels: 1e13
});
