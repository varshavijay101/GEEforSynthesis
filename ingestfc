/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var oilpalmperu = ee.FeatureCollection("users/varshavijay101/GEEforSynthesis/deforestoilpalmWGS");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//////////Ingest Feature Collection From Local Storage////////////////
 /*
 2020 Varsha Vijay GEEforSynthesis 
 https://sites.google.com/view/geeforsynthesis
*/

/* 
The Earth Engine data catalog contains many common datasets 
but many research projects use data obtained and stored locally

In this excercise we will use data from 
Vijay, Varsha, et al. 
"Deforestation risks posed by oil palm expansion in the Peruvian Amazon." 
Environmental Research Letters 13.11 (2018): 114010.

We will use one of the datasets describing deforestation 
inside current oil palm plantations downloaded directly 
from the Oil_palm_Peru folder in the Resources section 
of the google site for this workshop

Once you download this dataset, unzip and find 4 files:
deforestoilpalm.tif, deforestoilpalm.zip
deforestoilpalmWGS.zip, README
*/

/*
Some of the datasets needed in the GEE environment are
tabular data or shapefiles stored locally

Using the oil palm deforestation data we practice 
ingesting feature assets

Again click the Assets tab on the left and 
select new and Shape files
Upload the deforestoilpalm.zip folder
*/

/*
This was not successful because it uses UTM Zone 18S projection.
This is not compatible with GEE which uses EPSG 4326.

Lets try again with deforestoilpalmWGS.zip
Once ingested add to code editor *note difference in object type*
*/

var name= ee.FeatureCollection('name')

/*
A quicker alternative is hovering over the asset and
clicking the right arrow to import into the code editor

Print to console
*/

print(oilpalmperu)

/*
These data are derived from an image so are not stored
in an ideal format.  

Looking at the properties we can see that
deforestation year is stored in the gridcode column

What is the explanation for the number of features?
*/

/*
Adding to the Map shows a much less interpretable result
but try here using the Map.addLayer function
because we dont care about visualization too much use {}
for the visualization parameters and name the output
*/

Map.addLayer()

