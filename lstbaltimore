/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var l8raw = ee.ImageCollection("LANDSAT/LC08/C01/T1"),
    baltimore = 
    /* color: #d63000 */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-77.02304685972433, 39.622709223317614],
          [-77.02304685972433, 39.206813691422255],
          [-76.29794920347433, 39.206813691422255],
          [-76.29794920347433, 39.622709223317614]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
////////// Case Study: Land Surface Temperature //////////////////
/////////////////// in Baltimore county //////////////////////////
 /*
 2020 Varsha Vijay GEEforSynthesis 
 https://sites.google.com/view/geeforsynthesis
 
*/

//This case study comes from a collaboration with 
//Dr. Tijana Jovanovic.
//Please read below for background.

/*
Dr. Tijana Jovanovic, is trained in civil and environmental engineering 
with a focus on water resources. She was a fellow postdoctoral researcher at SESYNC,
currently at the British Geological Society. Tijana is focused on the critical problem
of urban green infrastructure. Citing green infrastructure projects involves optimizing
accros multiple goals to allow for multi-functionality. In Baltimore county, 
where her study was focused, one of the goals
of green infrastructure implementation is the reduction of urban heat island effects.

This critical question impacts ecological outcomes in urban settings, human health, as well
as the management of stormwater volumes!
*/

/*
To answer this question we use Landsat 8 data to calculate Land Surface Temperature.
First search for and import Landsat 8 Collection 1 Tier 1 Raw Images
Explore these data by printing the first image. 
To review Landsat 8 band values in greater detail than we did 
in earlier lessons refer to
https://landsat.gsfc.nasa.gov/landsat-8/landsat-8-bands/
*/

/*
Now we will import a very useful Google Earth Engine Toolbox (GEET)
library developed by Eduardo Ribeiro Lacerda called GEET
Visit his github site https://github.com/sacridini/GEET
to add his Javascript library to your scripts

Once added we call functions in the library using the require() function.
*/

var geet = require('users/elacerda/geet:geet'); 

/*
We also need to define the study area. As we did in a 
previous lesson, draw a the study area around the city of
Baltimore. Draw an area including the surrounding areas
to better approximate the county of Baltimore.
Name geometry object.
*/

/*
Now begin processing imagery from the raw Landsat image collection
by first filtering to the least cloudy image for July 2018.  This date
corresponds to the collection date for other data used in Tijana's
study.
See below for a start on this.
*/

//var image2 = ee.Image(
  //name.filterBounds()
    //.filterDate()
    //.sort()//sort by cloud cover values
    //.first()
//);

var image2 = ee.Image(
  l8raw.filterBounds(baltimore)
    .filterDate('2018-07-01', '2018-7-31')
    .sort('CLOUD_COVER')
    .first()
);
var new_toa_radiance = geet.toa_radiance(image2, 10);
print(new_toa_radiance)
var brightness_temp_img = geet.brightness_temp_l8c(new_toa_radiance, true);
var l8_ndvi = geet.ndvi_l8(brightness_temp_img); 
var img_pv = geet.prop_veg(l8_ndvi);
var lse = geet.surface_emissivity(img_pv);
var surfTemp_img = geet.surface_temperature_oli(lse);
var im = surfTemp_img.select("LST");
print(im);
Map.addLayer(im, {min: 7000, max: 8000, palette: ['blue', 'green', 'red']});

/*
Having filtered our image collection to a single image, we can
use the GEET library to process the raw image to obtain surface
reflectance values
*/

/*
Using the Landsat 8 documentation we see that bands 1-4 and 8
sense wavelengths in the visible spectrum (visible to the human eye),
band 5 senses near infared (useful for sensing vegetation), 
bands 5 and 6 short wave infared (useful for sensing wet areas),
and bands 10 and 11 for thermal infared wavelegths.

For this study we want to understand heat so we use the thermal infared
in addition to the other bands to calculate land surface temperature

*/


/*
We use the following set of functions to calculate 
land surface temperature (LST)
values as implemented in the GEET toolbox.

It should be noted that there are multiple methods used to calculate land
surface temperature for Landsat 8. This approach implements a method found
in http://www.jestr.org/downloads/Volume8Issue3/fulltext83122015.pdf

Here is an excellent GEE script by for another method
https://code.earthengine.google.com/d938f04d6a06c0049abf39d358c0c969

*hint-each function uses the output of the previous*

Feel free to print the outputs to see what is changing

var new_toa_radiance = geet.toa_radiance(name, 10);
var brightness_temp_img = geet.brightness_temp_l8c(name, true);
var l8_ndvi = geet.ndvi_l8(name); 
var img_pv = geet.prop_veg(name);
var lse = geet.surface_emissivity(name);
var surfTemp_img = geet.surface_temperature_oli(name);//print this
//Using the printed surface temp image above find
//the land surface temp band
var LSTimg = surfTemp_img.select(bandname);
*/




/*

Visualize the output
print(im);
Map.addLayer(im, {min: 7000, max: 8000, palette: ['blue', 'green', 'red']});

