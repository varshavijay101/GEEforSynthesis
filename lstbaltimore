/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var l8raw = ee.ImageCollection("LANDSAT/LC08/C01/T1"),
    baltimore = 
    /* color: #d63000 */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-77.02304685972433, 39.622709223317614],
          [-77.02304685972433, 39.206813691422255],
          [-76.29794920347433, 39.206813691422255],
          [-76.29794920347433, 39.622709223317614]]], null, false),
    image = ee.Image("OpenLandMap/CLM/CLM_LST_MOD11A2-DAY_M/v01");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
////////// Case Study: Land Surface Temperature //////////////////
/////////////////// in Baltimore county //////////////////////////
 /*
 2020 Varsha Vijay GEEforSynthesis 
 https://sites.google.com/view/geeforsynthesis
 
*/

//This case study comes from a collaboration with 
//Dr. Tijana Jovanovic.
//Please read below for background.

/*
Dr. Tijana Jovanovic, is trained in civil and environmental engineering 
with a focus on water resources. She was a fellow postdoctoral researcher at SESYNC,
currently at the British Geological Society. Tijana is focused on the critical problem
of urban green infrastructure. Citing green infrastructure projects involves optimizing
accros multiple goals to allow for multi-functionality. In Baltimore county, 
where her study was focused, one of the goals
of green infrastructure implementation is the reduction of urban heat island effects.

This critical question impacts ecological outcomes in urban settings, human health, as well
as the management of stormwater volumes!
*/

/*
To answer this question we use Landsat 8 data to calculate Land Surface Temperature.
First search for and import Landsat 8 Collection 1 Tier 1 Raw Images
Explore these data by printing the first image. 
To review Landsat 8 band values in greater detail than we did 
in earlier lessons refer to
https://landsat.gsfc.nasa.gov/landsat-8/landsat-8-bands/
*/

/*
Now we will import a very useful Google Earth Engine Toolbox (GEET)
library developed by Eduardo Ribeiro Lacerda called GEET
Visit his github site https://github.com/sacridini/GEET
to add his Javascript library to your scripts

Once added we call functions in the library using the require() function.
*/

var geet = require('users/elacerda/geet:geet'); 

/*
We also need to define the study area. As we did in a 
previous lesson, draw a the study area around the city of
Baltimore. Draw an area including the surrounding areas
to better approximate the county of Baltimore.
Name geometry object.
*/

/*
Now begin processing imagery from the raw Landsat image collection
by first filtering to the least cloudy image for July 2018.
July typically contains the hottest days of the year as shown in this
National Climate Data Center analysis.
https://www.ncdc.noaa.gov/news/warmest-day-of-the-year
See below for script to filter the image collection by time and
cloud cover.
*/

//var image2 = ee.Image(
  //name.filterBounds()
    //.filterDate()
    //.sort()//sort by cloud cover values
    //.first()
//);


var new_toa_radiance = geet.toa_radiance(image2, 10);
print(new_toa_radiance)
var brightness_temp_img = geet.brightness_temp_l8c(new_toa_radiance, true);
var l8_ndvi = geet.ndvi_l8(brightness_temp_img); 
var img_pv = geet.prop_veg(l8_ndvi);
var lse = geet.surface_emissivity(img_pv);
var surfTemp_img = geet.surface_temperature_oli(lse);
var im = surfTemp_img.select("LST");
print(im);
Map.addLayer(im, {palette: ['blue', 'green', 'red']});

/*
Having filtered our image collection to a single image, we can
use the GEET library to process the raw image to obtain surface
reflectance values
*/

/*
Using the Landsat 8 documentation we see that bands 1-4 and 8
sense wavelengths in the visible spectrum (visible to the human eye),
band 5 senses near infared (useful for sensing vegetation), 
bands 5 and 6 short wave infared (useful for sensing wet areas),
and bands 10 and 11 for thermal infared wavelegths.

For this study we want to understand heat so we use the thermal infared
in addition to the other bands to calculate land surface temperature
*/


/*
We use the following set of functions to calculate 
land surface temperature (LST)
values as implemented in the GEET toolbox.

It should be noted that there are multiple methods used to calculate land
surface temperature for Landsat 8. This approach implements a method found
in http://www.jestr.org/downloads/Volume8Issue3/fulltext83122015.pdf

Here is an excellent GEE script by for another method
https://code.earthengine.google.com/d938f04d6a06c0049abf39d358c0c969

*hint-each function uses the output of the previous*

Feel free to print the outputs to see what is changing
*/

var new_toa_radiance = geet.toa_radiance(name, 10);
var brightness_temp_img = geet.brightness_temp_l8c(name, true);
var l8_ndvi = geet.ndvi_l8(name); 
var img_pv = geet.prop_veg(name);
var lse = geet.surface_emissivity(name);
var surfTemp_img = geet.surface_temperature_oli(name);//print this
//Using the printed surface temp image above find
//the land surface temp band
var LSTimg = surfTemp_img.select('bandname');


/*
Visualize the output
To add an image stretch go the the Layers tab in the map
Click the settings(wheel) on the land surface temp image
in Range it says Custom.  Click this and select one of the image
stretches below
*/

Map.addLayer(name, {palette: ['blue', 'yellow', 'red']},"name");

/*
If green infrastructure can play a role in reducing urban heat,
then let us investigate the relationship between vegetation occurence
and land surface temperature.  We do this using the
Normalized Difference Vegetation Index(NDVI) 
read more in the link below
https://gisgeography.com/ndvi-normalized-difference-vegetation-index/
*/

/*
If you scroll up in this script.  You will see that we already calculated
this.  Use the select function to get the NDVI band from the l8_ndvi image.
Visualize in Map.
*/

var name = l8_ndvi.select(bandname);
Map.addLayer(name)

/*
Looking at these two images (toggle on and off and reset the stretch)
it seems that the areas with high levels of vegetation (high NDVI values)
do seem to have lower land surface temperatures.
Great job! That makes sense.
*/

/*
Finally, lets validate our LST estimates by comparing to the
MOD11A2.006 Terra Land Surface Temperature and Emissivity 8-Day Global 1km
Search for the imagecollection and add to code editor.

We are only interested in LST so use the .select function to get the
LST_Day_1km band

MODIS LST values are scaled and stored in degrees K so we need to convert
to C to interpret the values
*/

var name = name.select(bandname)

var modLSTc = name.map(function(img) {
  return img
    .multiply(0.02)
    .subtract(273.15);
});

/*
Filter for a date close to the aquisition date 
of the Landsat image we used (July 8, 2018).
We are not filtering by our study region because 
each image is stored as a global image.  
Use clip() to restrict to only pixels in the study region
*/

var name = ee.Image(
  name
  .filterDate('2018-07-10', '2018-7-14')
  .first()
);

/*
These data are much coarser resolution than our estimate from landsat.
Compare spatial resolutions of our calculated Landsat dataset and this MODIS
dataset using the projection().nominalScale() function

*Note MODIS data are in a sinusoidal projection that is different from
the other data in the data catalog.  We wont worry about that here but
it is important to think about*
*/

print(name.first().projection().nominalScale())//Fill with Modis Image Collection
print(name.projection().nominalScale())//Landsat LST

/*
Based on the difference in spatial resolution we expect differences in LST
estimates between the two datasets. But what we are looking for here is a gut
check on the values we calculated.
Add the MODIS LST estimate to the map using the same palette visualization.
Use the Inspector tab on the right to click and compare values.
*/

Map.addLayer(name, {palette: ['blue', 'yellow', 'red']},"name");

/*
These values seem to be in broad agreement.  In later lessons we will use charts
to look at the correllation between values in our study region but for now 
we can agree that we have verified the Landsat LST data we produced
*/

/*
Finally we'll do something super fun!
We will explore temporal trends in land surface temperature in
the east coast using the MODIS LST image collection
*/

/*
We use the following function to add a time band 
and rescale milliseconds time values
*/

var createTimeBand = function(image) {
   return image.addBands(image.metadata('system:time_start').divide(1e18));
};







