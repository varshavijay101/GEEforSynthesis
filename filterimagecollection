////////// Filter Image Collection ////////////////
 /*
 2020 Varsha Vijay GEEforSynthesis 
 https://sites.google.com/view/geeforsynthesis
*/

/*
Load Landsat 8 Surface Reflectance Tier 1 Image Collection
and print to console *hint think about number of objects in collection*
Add name for interpretability
*/

print(name,"name")

/*
Filter for images collected from 2014-2020
*/

var name=name
.filterDate('yyyy-mm-dd', 'yyyy-mm-dd')


/*
We are interested in images collected in the Washington DC area
Use your Map below to navigate to this area
and click the draw a shape button 
on the top left of the map.
Draw a shape which incorporates DC, Baltimore and Annapolis.

You created a geometry object!
Scroll up to imports to see this in your code editor.
Name object.
Print to see data type
*/

print(geometry)

/*
Use to filter ImageCollection
*/

var name = name
.filterBounds(geometry)


/*
We want to calculate the mean image for summer (May-Aug) 
for the sample years 14-17
First filter to summer images
*/

var DCsummer= landsatsfDC
.filter(ee.Filter.calendarRange(5,8,'month'))

print(DCsummer,"summer")

/*
What kind of object is this?
*/

/*
To create the mean image for summer we reduce
the ImageCollection to a single image using the mean function
and print the result
*/

var DCsummermn= DCsummer.mean()
print(DCsummermn)

/*
Great job!
Now we have created a mean summer image.
However, we are often concerned about the impacts of 
cloud cover on our estimates of surface reflectance.
Now we filter images with high cloud cover from the
summer and winter image collections before computing a mean image
*/

/*
A simple way (read- not necessarily the best) way to do this
is using the filterMetadata function.
Printing the ImageCollection showed that each image has a
property "CLOUD_COVER" which is an estimate of the percent cloud
cover for an image.
Filter images with < 10% CLOUD_COVER
Fill in the function with the correct operator
*hint- use the Docs tab to find syntax for defined functions*
*/

var name = name
.filterMetadata('CLOUD_COVER', operator, threshold)


/*
Calculate mean image from cloud filtered collection
*/

var name = name.mean()

/*
Map false color image using bands 3,4,5.
This is a technique used to emphasize observe patterns 
not as visible to the human eye. We use a visualization that emphasizes
near-infared to explore vegetation patterns 
(See http://gsp.humboldt.edu/OLM/Courses/GSP_216_Online/lesson3-1/composites.html
for a guide to Landsat 8 bands and image composites)
*/

/*
Below I give you the visualization parameters for the Map.addLayer function.
Note that Landsat SR values to be scaled by 0.0001 
to get true SR values between 0 and 1.
*/

var vizParams = {
  bands: ['B5', 'B4', 'B3'],
  min: -30,
  max: 7000,
  gamma: [0.95, 1.1, 1]
};

/*
Center the map on Annapolis, Maryland (home of SESYNC!).
Obtain coordinates by opening Inspector tab and clicking Annapolis city
or your favorite DC area location.
Copy coordinates into Map
and display the image.
*/

Map.setCenter(Longitude, Latitude, zoom level);
Map.addLayer(name, vizParams, 'name');









